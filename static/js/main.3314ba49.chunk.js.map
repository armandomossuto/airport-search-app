{"version":3,"sources":["Components/Home/search_bar.js","Components/Home/home.js","Components/Search/error_message.js","Components/Search/no_results.js","Components/Search/results_display.js","Components/Search/loading_message.js","Components/Search/bad_request.js","Components/Search/search.js","Components/NavBar/navbar.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","redirect","searchParam","checkKey","bind","assertThisInitialized","onChange","onSubmit","event","key","setState","target","value","_this$state","react_default","a","createElement","Redirect","push","to","type","placeholder","onKeyDown","onClick","src","alt","Component","Home","className","search_bar_SearchBar","ErrorMessage","NoResults","_ref","ResultsDisplay","pages_array","resultstoShow","page","map","result","index","dangerouslySetInnerHTML","__html","airport","name","location","page_number","LoadingMessage","BadRequest","URL","Search","searchResults","status","handleErrors","processData","changePage","_this2","urlParams","exec","search","query","console","log","fetch","then","resp","json","data","ok","words","split","i","length","regEx","RegExp","j","replace","city","country","total_pages","parseInt","isNaN","slice","history","textContent","newpage","_this$state2","loading_message","bad_request","error_message","no_results","results_display","NavBar","Link","hashHistory","createHashHistory","basename","process","App","HashRouter","navbar","Route","exact","path","component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3314ba49.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nexport default class SearchBar extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      redirect: false,\n      searchParam: '',\n    };\n\n    this.checkKey = this.checkKey.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  checkKey(event) {\n    // This event handler just checks if key pressed was Enter to excute onSubmit \n    if(event.key===\"Enter\") {\n      this.onSubmit();\n    }\n  }\n\n  onChange(event) {\n    // Handles change of value of the input. This is the only way to handle it with React.\n    this.setState({searchParam: event.target.value});\n  }\n\n  onSubmit() {\n    // Handles when user submits the search. Changes redirect to TRUE, so next time render is excuted it will redirect to Search component\n   this.setState({redirect: true})\n  }\n\n  render() {\n    const { redirect, searchParam } = this.state;\n    // Checks if user submitted the search query. If true redirects to Search component\n    if(redirect) {\n      return <Redirect push to={\"/search?query=\"+searchParam+\"?page=1\"} />;\n    }\n  // If not, renders this component normally\n    return (\n        <div>\n          < input \n            type=\"text\" \n            placeholder=\"Name, City, IATA code, ...\" \n            value={searchParam} \n            onChange={this.onChange} \n            onKeyDown={this.checkKey} \n          />\n          < button\n            type=\"submit\" \n            onClick={this.onSubmit} \n          > \n            <img src=\"search_icon.png\" alt=\"\" /> \n          </button>\n        </div>\n      );\n  }\n}\n\n","import React from 'react';\nimport SearchBar from './search_bar.js';\n\nconst Home = () =>\n    <div className=\"front-page\">\n      <p> Do you want to find an airport? </p>\n      <SearchBar />\n    </div>\n\nexport default Home;\n\n","import React from 'react';\n\n\nconst ErrorMessage = () =>\n\t<div className=\"no-results\">\n\t  \t<p className=\"error-404\"> 404 </p>\t\n      \t<p> There was a problem with the server. Please try again later </p>\n    </div>\n\nexport default ErrorMessage;\n","import React from 'react';\n\n\nconst NoResults = ({ searchParam }) =>\n  <div className=\"no-results\">\n  \t<div>\n\t    <p> Your search - <b> {searchParam} </b> - did not match any airport. </p>\n\t    <p> Suggestions: </p>\n\t    <ul>\n\t      <li>Make sure that all words are spelled correctly.</li>\n\t      <li>Try different keywords.</li>\n\t    </ul>\n\t </div>\n  </div>\n\nexport default NoResults;\n","import React from 'react';\n\n// Only way to not let React scape the HTML inside our data array (we added a Mark tag inside every instace of the searched terms) is to\n// use  dangerouslySetInnerHTML\nconst ResultsDisplay = ({ pages_array, resultstoShow, onClick, page }) =>\n\t<div className=\"results\">\n\t\t<p> Your search returned the following results: </p>\n\t\t<div className=\"results-display\">\n\t        {resultstoShow.map((result, index) =>\n\t          <div key={index}>\n\t            <p dangerouslySetInnerHTML={{__html: result.airport.name}}></p>\n\t            <p dangerouslySetInnerHTML={{__html: result.airport.location}}></p>\n\t          </div>\n\t         )}\n\t    </div>\n\t    <div className=\"pages-menu\">\n\t    \tPage: {pages_array.map((page_number, index) =>\n\t    \t\t<span \n\t    \t\t\tkey={index} \n\t    \t\t\tclassName={page==page_number ? \"selected-page\" : null} \n\t    \t\t\tonClick={onClick}\n\t    \t\t> \n\t    \t\t{page_number} \n\t    \t\t</span>\n\t    \t\t)}\n\t    </div>\n\t </div>\n\nexport default ResultsDisplay;\n","import React from 'react';\n\n\nconst LoadingMessage = () =>\n\t<div className=\"no-results\">\n      <p> Loading your search results. please wait a few seconds </p>\n    </div>\n\nexport default LoadingMessage;\n","import React from 'react';\n\n\nconst BadRequest = ({URL}) =>\n\t<div className=\"no-results\">\n\t  \t<p className=\"error-400\"> Not found </p>\t\n      \t<p> Your URL parameters <b>{URL}</b> have improper format </p>\n    </div>\n\nexport default BadRequest;\n","import React, { Component } from 'react';\nimport ErrorMessage from './error_message';\nimport NoResults from './no_results';\nimport ResultsDisplay from './results_display';\nimport LoadingMessage from './loading_message';\nimport BadRequest from './bad_request';\n\n\nexport default class Search extends Component {\n  constructor(props) {\n    super(props);\n\n    /* This component handle multiple variables in its internal state. Here the explanation of each of them:\n      *searchResults: an array of objects, created with the data fetched from the API\n      *searchParam: a string with the query submitted by the user\n      *page: if there are more than 12 results, app will divide them by page. 12 search results by page. This variable indicates current page.\n      *status: used to change the message the user will received depending on current status. 3 values:\n        -loading: while waiting for fetch api to finish.\n        -error: fetch api returns error.\n        -ok: fetch api didn't return error and completed request\n        -bad_request: user tried to access to this component with bad URL parameters\n    */\n    this.state = {\n      searchResults: '',\n      searchParam: '',\n      page: '',\n      status: 'loading',\n      resultstoShow: '',\n      pages_array: '',\n    }\n\n    this.handleErrors = this.handleErrors.bind(this);\n    this.processData = this.processData.bind(this);\n    this.changePage = this.changePage.bind(this);\n  }\n\n  componentDidMount() {\n    // This will be excuted after the component is mounted a first time. This is the ussual place to instantiate a network request in React.\n    \n    // First step is to parse the query params from the UR (two parameters: query and page. \n    // urlParams is an array with query in  index [1] and current page in index [2].\n    const parseParam = /\\?query=(.*)\\?page=(.*)/;\n    const urlParams =  parseParam.exec(this.props.location.search);\n    if (urlParams === null) {\n      return (this.setState({ status: 'bad_request' }));\n    }\n    const query = urlParams[1];\n    let status = '';\n    const URL = 'https://cors-anywhere.herokuapp.com/https://embed-staging.nezasa.com/api1/airports?query='+ query + '&useCOResponse=true&contentLang=en';\n    console.log(URL);\n    // fetch used to retrieve data from web API\n    fetch(URL)\n        .then((resp) => this.handleErrors(resp))\n        .then((resp) => resp.json())\n        .then((data) => this.processData(data, query, urlParams[2]))\n  }\n\n  handleErrors(resp) {\n\n    // Checks if fetch request returns an error and changes status accordingly\n     if (!resp.ok) {\n      this.setState({ status: 'error' });\n    } else {\n      this.setState({ status: 'ok' });\n    }\n    // Returns resp, so it can be used in the next part of the chain\n    return resp;\n  }\n\n  processData(data, query, page) {\n    //If fetch request is OK, we need to convert the data retrieved to the format compatible with our APP\n\n    // In case query is more than one word, we are going to separete them. We will create an array with each separate word\n    let words = query.split(\"%20\");\n    // We are introducing MARK tag between any match with the term searched by the user\n    // In order to perform this task, we are using a regular expression\n    let result = data;\n    for(let i=0;i<words.length;i++) {\n\n      const regEx = new RegExp(\"(\"+words[i]+\")\", \"gi\");\n      for (let j=0; j<data.length; j++) {\n          result[j].airport.name = data[j].airport.name.replace(regEx, '<mark>$1</mark>');\n          result[j].airport.city = data[j].airport.city.replace(regEx, '<mark>$1</mark>');\n          result[j].airport.country = data[j].airport.country.replace(regEx, '<mark>$1</mark>');\n          result[j].airport.location = '<img alt=\"\" src=\"location-icon.jpg\" />' + result[j].airport.city +\",\" + result[j].airport.country;\n          }\n    }\n\n    let total_pages = parseInt((result.length/12)+1);\n\n    \n    // If user manually input the URL params and set it to a number greater than total number of pages or something that is not a number,\n    //  we will force him to visuallize last page to avoid an empty page\n    if((page>total_pages)|| isNaN(page))\n    {\n      page = total_pages;\n    }\n     \n    // Here we will create a smaller array with only the results from current page\n    let resultstoShow = result.slice(((page-1)*12),((page-1)*12)+12);\n    \n    // To finish we are generating an array with the page numbers, this is because we are going to use map method to generate the \n    // page menu at the bottom of the result list.\n    \n    let pages_array = [];\n      for(let i=0;i<total_pages;i++) {\n        pages_array.push(i+1);\n      }\n    \n    let searchParam = query.replace(\"%20\",\" \")\n\n    this.setState({ searchResults: result, page: page, searchParam: searchParam, status: 'ok', resultstoShow: resultstoShow, pages_array: pages_array });\n  }\n\n  changePage(event) {\n    // Change Page when user clicks on the search menu\n    // This.props.history.push will change current URL to match with the change of page number.\n    // URL is passed as props to the component, so this will activate lifecycle componentWillReceiveProps where we will change the component state\n    const { searchParam } = this.state;\n    this.props.history.push(\"/search?query=\"+searchParam+\"?page=\"+ event.target.textContent);\n  }\n\n  componentWillReceiveProps() {\n    // Props will be changed when changing page and this method will be executed\n    // We need to parse again Page value from URL and use it to update resultstoShow and Page in internal state\n    const { page, searchResults } = this.state;\n    const parsePage = /\\?page=(.*)/;\n    const newpage =  parsePage.exec(this.props.history.location.search)[0].replace(\"?page=\",\"\");\n    \n    let resultstoShow = searchResults.slice(((newpage-1)*12),((newpage-1)*12)+12);\n    this.setState({resultstoShow: resultstoShow, page: newpage })\n    \n  }\n\n  render() {\n    const { searchResults, pages_array, status, searchParam, resultstoShow, page } = this.state;\n    // Depending of the status, a different component will be load\n    switch(status) {\n\n      case 'loading':\n        return (<LoadingMessage />)\n      \n      case 'bad_request':\n        return(<BadRequest URL={this.props.location.search} />);\n\n      case 'error':\n        return (<ErrorMessage />) ;\n\n      case 'ok':\n        if (resultstoShow.length === 0) {\n          return (<NoResults searchParam={searchParam} />);\n        } else {  \n          return (\n                  <ResultsDisplay \n                    pages_array={pages_array} \n                    resultstoShow={resultstoShow} \n                    onClick={this.changePage} \n                    page={page} \n                  />\n                 );\n        }\n    }\n  }\n}\n\n\n","import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst NavBar = () =>\n  <nav>\n    <ul>\n      <li> <Link to=\"/\"><img src=\"home_icon.png\" alt=\"\" /></Link> </li>\n    </ul>\n  </nav>\n\n  export default NavBar;\n\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Style/index.css';\nimport { HashRouter as Router, Route} from 'react-router-dom';\nimport Home from './Components/Home/home.js';\nimport Search from './Components/Search/search.js';\nimport NavBar from './Components/NavBar/navbar.js'\nimport createHashHistory from 'history/createHashHistory';\n\n\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\n\nclass App extends Component {\n  render() {\n    return (\n      <Router history={hashHistory}>\n        <div>\n          <NavBar />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/search\" component={Search} />\n          <footer> <div> Created by Armando Mossuto </div> </footer> \n        </div>\n      </Router>\n      );\n  }\n}\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'));\n"],"sourceRoot":""}